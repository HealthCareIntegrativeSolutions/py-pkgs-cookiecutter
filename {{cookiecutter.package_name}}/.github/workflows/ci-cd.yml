name: ci-cd

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  ci:
    # Set up operating system
    runs-on: ubuntu-latest
    steps:
    # Step 1. Set up Python 3.9
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    # Step 2. Check-out repository so we can access its contents
    - uses: actions/checkout@v2
    # Step 3. Install poetry
    - uses: snok/install-poetry@v1
    # Step 4. Install our package
    - name: Install package
      run: poetry install
    # Step 5. Run tests for package
    - name: Test with pytest
      run: poetry run pytest tests/ --cov={{ cookiecutter.package_name }} --cov-report=xml
    # Step 6. Use Codecov to track coverage
    - uses: codecov/codecov-action@v2
      with:
        files: ./coverage.xml   # coverage report
        fail_ci_if_error: true  # terminate workflow if there's an error
    # Step 7. Build documentation
    - name: Build documentation
      run: poetry run make html --directory docs/
  cd:
    # Only run this job if the "ci" job passes
    needs: ci
    # Only run this job if new work is pushed to "main"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Set up operating system
    runs-on: ubuntu-latest
    steps:
    # Step 1. Set up Python 3.9
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    # Step 2. Check-out repository so we can access its contents
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # Step 3. Use PSR to make release
    - name: Python Semantic Release
      run: |
          pip install python-semantic-release
          git config user.name github-actions
          git config user.email github-actions@github.com
          semantic-release publish
    # Step 4. Publish to TestPyPI
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: {% raw %}${{ secrets.TEST_PYPI_API_TOKEN }}{% endraw %}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true
    # Step 5. Test install from TestPyPI
    - name: Test install from TestPyPI
      run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          {{ cookiecutter.package_name }}
    # Step 6. Publish to PyPI
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: {% raw %}${{ secrets.PYPI_API_TOKEN }}{% endraw %}
        skip_existing: true
